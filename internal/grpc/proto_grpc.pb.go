// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: proto/proto.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoriesSummarizer_QueueLength_FullMethodName      = "/agent.StoriesSummarizer/QueueLength"
	StoriesSummarizer_SummarizeStories_FullMethodName = "/agent.StoriesSummarizer/SummarizeStories"
)

// StoriesSummarizerClient is the client API for StoriesSummarizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoriesSummarizerClient interface {
	QueueLength(ctx context.Context, in *QueueLengthRequest, opts ...grpc.CallOption) (*QueueLengthResponse, error)
	SummarizeStories(ctx context.Context, in *SummarizeStoriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummarizeStoriesResponse], error)
}

type storiesSummarizerClient struct {
	cc grpc.ClientConnInterface
}

func NewStoriesSummarizerClient(cc grpc.ClientConnInterface) StoriesSummarizerClient {
	return &storiesSummarizerClient{cc}
}

func (c *storiesSummarizerClient) QueueLength(ctx context.Context, in *QueueLengthRequest, opts ...grpc.CallOption) (*QueueLengthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueLengthResponse)
	err := c.cc.Invoke(ctx, StoriesSummarizer_QueueLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storiesSummarizerClient) SummarizeStories(ctx context.Context, in *SummarizeStoriesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummarizeStoriesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StoriesSummarizer_ServiceDesc.Streams[0], StoriesSummarizer_SummarizeStories_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SummarizeStoriesRequest, SummarizeStoriesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StoriesSummarizer_SummarizeStoriesClient = grpc.ServerStreamingClient[SummarizeStoriesResponse]

// StoriesSummarizerServer is the server API for StoriesSummarizer service.
// All implementations must embed UnimplementedStoriesSummarizerServer
// for forward compatibility.
type StoriesSummarizerServer interface {
	QueueLength(context.Context, *QueueLengthRequest) (*QueueLengthResponse, error)
	SummarizeStories(*SummarizeStoriesRequest, grpc.ServerStreamingServer[SummarizeStoriesResponse]) error
	mustEmbedUnimplementedStoriesSummarizerServer()
}

// UnimplementedStoriesSummarizerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoriesSummarizerServer struct{}

func (UnimplementedStoriesSummarizerServer) QueueLength(context.Context, *QueueLengthRequest) (*QueueLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueLength not implemented")
}
func (UnimplementedStoriesSummarizerServer) SummarizeStories(*SummarizeStoriesRequest, grpc.ServerStreamingServer[SummarizeStoriesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SummarizeStories not implemented")
}
func (UnimplementedStoriesSummarizerServer) mustEmbedUnimplementedStoriesSummarizerServer() {}
func (UnimplementedStoriesSummarizerServer) testEmbeddedByValue()                           {}

// UnsafeStoriesSummarizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoriesSummarizerServer will
// result in compilation errors.
type UnsafeStoriesSummarizerServer interface {
	mustEmbedUnimplementedStoriesSummarizerServer()
}

func RegisterStoriesSummarizerServer(s grpc.ServiceRegistrar, srv StoriesSummarizerServer) {
	// If the following call pancis, it indicates UnimplementedStoriesSummarizerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoriesSummarizer_ServiceDesc, srv)
}

func _StoriesSummarizer_QueueLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoriesSummarizerServer).QueueLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoriesSummarizer_QueueLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoriesSummarizerServer).QueueLength(ctx, req.(*QueueLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoriesSummarizer_SummarizeStories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummarizeStoriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoriesSummarizerServer).SummarizeStories(m, &grpc.GenericServerStream[SummarizeStoriesRequest, SummarizeStoriesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StoriesSummarizer_SummarizeStoriesServer = grpc.ServerStreamingServer[SummarizeStoriesResponse]

// StoriesSummarizer_ServiceDesc is the grpc.ServiceDesc for StoriesSummarizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoriesSummarizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.StoriesSummarizer",
	HandlerType: (*StoriesSummarizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueLength",
			Handler:    _StoriesSummarizer_QueueLength_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SummarizeStories",
			Handler:       _StoriesSummarizer_SummarizeStories_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/proto.proto",
}
